#!/bin/bash

#==================================================================
#Initilisation du programme et des commandes en sudo
#==================================================================

echo "                                                                  " >> ~/server-install.log
echo "==================================================================" >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log
echo "   Initilisation du programme, des utilisateur et des groupes     " >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log
echo "==================================================================" >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log

## Rediriger le descripteur de fichier n°3 vers la sortie standard (utilisé en cas d'échec de l'enregistrement)
exec 3>&1

() {
    local error retval
    # Exécutez la commande et enregistrez les messages d'erreur (sortie vers l'erreur standard
    # flux en $error, mais envoyer une sortie régulière vers le descripteur de fichier 3 qui
    # redirige vers la sortie standard

    error="$("$@" 2>&1 >&3)"
    retval=$?
    # si la commande a échoué (elle a renvoyé un code de sortie non nul)
    if [ $retval -gt 0 ];
      then
        if [ -z "$error" ];
          then
            # créer un message d'erreur s'il n'y en avait pas
            error="Command failed with exit code $retval"
        fi

        # décommentez si vous voulez la commande dans le message d'erreur
        error="Command $* failed: $error"

        # décommentez si vous voulez montrer l'erreur immédiatement
        echo "$error" >> ~/server-install.log
        echo "                                                                  " >> ~/server-install.log
      else
        echo "Aucune erreur n'a été détecté" >> ~/server-install.log
        echo "                                                                  " >> ~/server-install.log
    fi
}

#Adduser webserver
 sudo adduser --quiet --disabled-password --shell /bin/bash --home /home/web_server --gecos "web_server" web_server
 sudo echo "webserver:ZapV-NaFOGTVl-WC_F7h" |  sudo chpasswd
#Adduser Minecraft
 sudo adduser --quiet --disabled-password --shell /bin/bash --home /home/minecraft --gecos "minecraft" minecraft
 sudo echo "minecraft:x_T-I4URe1U3IESoEiBy" |  sudo chpasswd
#Adduser webserver to group sudo
 sudo usermod -a -G sudo webserver

 sudo echo "
# See sudoers(5) for more information on '#include' directives:

# Added by cloud-init v. 18.3-9-g2e62cb8a-0ubuntu1~18.04.2 on Fri, 10 Aug 2018 11:08:11 +0000
#includedir /etc/sudoers.d

# Allow members of group sudo to execute any command
%sudo   ALL=(ALL:ALL) ALL
" > /etc/sudoers



#==================================================================
#Mise à jour de la distribution
#==================================================================

echo "                                                                  " >> ~/server-install.log
echo "==================================================================" >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log
echo " Téléchargement, Installation des mise à jours de la distribution " >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log
echo "==================================================================" >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log


 sudo apt-get update &&  sudo apt-get upgrade -y &&  sudo apt dist-upgrade -y &&  sudo apt autoremove -y;

#==================================================================
#Installation des packets de base
#==================================================================

echo "                                                                  " >> ~/server-install.log
echo "==================================================================" >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log
echo "                 Installation des packets de base                 " >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log
echo "==================================================================" >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log


 sudo apt-get install -y tree screen git unzip
 sudo apt-get update &&  sudo apt-get upgrade -y


#==================================================================
#Installation du Serveur Web
#==================================================================

echo "==================================================================" >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log
echo "                    Installation du Serveur Web                   " >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log
echo "==================================================================" >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log


 sudo apt-get install -y curl gnupg2 ca-certificates lsb-release
 sudo echo "deb http://nginx.org/packages/debian `lsb_release -cs` nginx" > /etc/apt/sources.list.d/nginx.list
 sudo curl -fsSL https://nginx.org/keys/nginx_signing.key |  sudo apt-key add -
 sudo apt-key fingerprint ABF5BD827BD9BF62
 sudo apt update
 sudo apt install nginx

#==================================================================
#Installation de Php7.3-fpm et des dépendances pour la laravel
#==================================================================

echo "==================================================================" >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log
echo "   Installation de Php7.3-fpm et des dépendances pour la laravel  " >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log
echo "==================================================================" >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log


 sudo apt-get install php7.3-fpm php7.3-mbstring php7.3-curl php7.3-bcmath php7.3-ctype php7.3-fileinfo php7.3-json php7.3-mbstring php7.3-pdo php7.3-xml php7.3-mysqli

#==================================================================
#Modification du fichier principal de configuration du service Web
#==================================================================

echo "==================================================================" >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log
echo " Modification du fichier principal de configuration du service Web" >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log
echo "==================================================================" >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log

 sudo cp /etc/nginx/nginx.conf /etc/nginx/nginx-old.conf
 sudo echo "
  user  www-data;
  worker_processes  2;

  error_log  /var/log/nginx/error.log warn;
  pid        /var/run/nginx.pid;


  events {
      worker_connections  1024;
  }


  http {
      include       /etc/nginx/mime.types;
      default_type  application/octet-stream;

      log_format  main  '\$remote_addr - \$remote_user [\$time_local] \"\$request\" '
                        '\$status \$body_bytes_sent \"\$http_referer\" '
                        '\"\$http_user_agent\" \"\$http_x_forwarded_for\"';

      access_log  /var/log/nginx/access.log  main;

      sendfile        on;
      #tcp_nopush     on;

      keepalive_timeout  65;

      #gzip  on;

      include /etc/nginx/conf.d/*.conf;
  }
" > /etc/nginx/nginx.conf

#==================================================================
#Modification des paramètres commums à tous les sites web
#==================================================================

echo "==================================================================" >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log
echo "     Modification des paramètres commums à tous les sites web     " >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log
echo "==================================================================" >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log

 sudo cp /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default-old.conf
 sudo echo "
server {
      listen 80;
      server_name zenoriamc.fr www.zenoriamc.fr;
      root /home/webserver/site_web/public;

      add_header X-Frame-Options \"SAMEORIGIN\";
      add_header X-XSS-Protection \"1; mode=block\";
      add_header X-Content-Type-Options \"nosniff\";

      index index.php;

      charset utf-8;

      location / {
          try_files \$uri \$uri/ /index.php?$query_string;
      }

      location = /favicon.ico { access_log off; log_not_found off; }
      location = /robots.txt  { access_log off; log_not_found off; }

      error_page 404 /index.php;

      location ~ \.php\$ {
          fastcgi_pass unix:/var/run/php/php7.3-fpm.sock;
          fastcgi_param SCRIPT_FILENAME \$realpath_root\$fastcgi_script_name;
          include fastcgi_params;
      }

      location ~ /\.(?!well-known).* {
        deny all;
      }
  }" > /etc/nginx/conf.d/default.conf

#==================================================================
#Ajout du HTTPS Nginx avec Certbot
#==================================================================

echo "==================================================================" >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log
echo "                Ajout du HTTPS Nginx avec Certbot                " >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log
echo "==================================================================" >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log

 sudo apt-get install certbot python-certbot-nginx
 sudo certbot --nginx

#==================================================================
#Ajout de l'utilisateur Webserver et configuration des droits des fichiers
#==================================================================

echo "==================================================================" >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log
echo "    Ajout de Webserver et configuration des droits des fichiers   " >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log
echo "==================================================================" >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log

 sudo chown -R www-data:www-data /home/webserver/site_web/vendor/
 sudo chown -R www-data.www-data /home/webserver/site_web/storage/
 sudo chown -R www-data.www-data /home/webserver/site_web/bootstrap/cache/
 sudo usermod -aG www-data webserver

#==================================================================
#Instalation de Composer
#==================================================================

echo "==================================================================" >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log
echo "                      Instalation de Composer                     " >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log
echo "==================================================================" >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log

 cd ~
 php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
 php -r "if (hash_file('sha384', 'composer-setup.php') === '756890a4488ce9024fc62c56153228907f1545c228516cbf63f885e036d37e9a59d27d63f46af1d4d07ee0f76181c7d3') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
 php composer-setup.php
 sudo php composer-setup.php --install-dir=/usr/local/bin --filename=composer

#==================================================================
#Instalation de NodeJS
#==================================================================

echo "==================================================================" >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log
echo "                        Instalation de NodeJS                     " >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log
echo "==================================================================" >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log

 sudo curl -sL https://deb.nodesource.com/setup_15.x |  bash -
 sudo apt-get install -y nodejs

#==================================================================
#Instalation de Laravel
#==================================================================.

echo "==================================================================" >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log
echo "                      Instalation de Laravel                      " >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log
echo "==================================================================" >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log

 cd /home/webserver
 composer create-project laravel/laravel site_web
 sudo chmod -R 775 site_web
 cd /home/webserver/site_web
 composer update
 composer install --optimize-autoloader --no-dev
 npm update
 npm install
 php artisan key:generate

#==================================================================
#Redemarrage des services Web et Php
#==================================================================

echo "==================================================================" >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log
echo "                Redemarrage des services Web et Php               " >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log
echo "==================================================================" >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log

 sudo /etc/init.d/nginx restart &&  sudo /etc/init.d/php7.3-fpm restart

#==================================================================
#Instalation et configuration de MySQL
#=================================================================

echo "==================================================================" >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log
echo "               Instalation et configuration de MySQL              " >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log
echo "==================================================================" >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log

 sudo apt-get install -y mariadb-server
 sudo mysql_secure_installation
 mysql --user="root" --password="ddHf:P21PM'^n3g;\"v@d" --execute="GRANT ALL ON *.* TO 'laravel'@'localhost' IDENTIFIED VIA mysql_native_password USING 'Et6MLH_j2xX8E1fIT44y' WITH GRANT OPTION;"
 mysql --user="root" --password="ddHf:P21PM'^n3g;\"v@d" --execute="FLUSH PRIVILEGES;"
 sudo /etc/init.d/mariadb restart

#==================================================================
#Instalation de Redis
#=================================================================

echo "==================================================================" >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log
echo "                        Instalation de Redis                      " >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log
echo "==================================================================" >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log

 sudo apt-get install -y redis-server

#==================================================================
#Instalation et configuration de Postfix
#=================================================================

echo "==================================================================" >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log
echo "              Instalation et configuration de Postfix             " >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log
echo "==================================================================" >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log

 sudo apt-get install postfix mailutils
# echo "" > /etc/postfix/main.cf
 sudo /etc/init.d/postfix restart
 echo "Ceci est un email de Test" | mail -s "Sujet de Test" locascio.clement@gmail.com

#==================================================================
#Instalation de Java
#=================================================================

echo "==================================================================" >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log
echo "                        Instalation de Java                       " >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log
echo "==================================================================" >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log

 sudo apt-get install default-jdk

#==================================================================
#Instalation et configuration de Fail2Ban
#=================================================================

echo "==================================================================" >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log
echo "             Instalation et configuration de Fail2Ban             " >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log
echo "==================================================================" >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log

 sudo apt-get install -y fail2ban
 sudo cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local
 echo "
  #
  # WARNING: heavily refactored in 0.9.0 release.  Please review and
  #          customize settings for your setup.
  #
  # Changes:  in most of the cases you should not modify this
  #           file, but provide customizations in jail.local file,
  #           or separate .conf files under jail.d/ directory, e.g.:
  #
  # HOW TO ACTIVATE JAILS:
  #
  # YOU SHOULD NOT MODIFY THIS FILE.
  #
  # It will probably be overwritten or improved in a distribution update.
  #
  # Provide customizations in a jail.local file or a jail.d/customisation.local.
  # For example to change the default bantime for all jails and to enable the
  # ssh-iptables jail the following (uncommented) would appear in the .local file.
  # See man 5 jail.conf for details.
  #
  # [DEFAULT]
  # bantime = 1h
  #
  # [sshd]
  # enabled = true
  #
  # See jail.conf(5) man page for more information



  # Comments: use '#' for comment lines and ';' (following a space) for inline comments


  [INCLUDES]

  #before = paths-distro.conf
  before = paths-debian.conf

  # The DEFAULT allows a global definition of the options. They can be overridden
  # in each jail afterwards.

  [DEFAULT]

  #
  # MISCELLANEOUS OPTIONS
  #

  # 'ignorself' specifies whether the local resp. own IP addresses should be ignored
  # (default is true). Fail2ban will not ban a host which matches such addresses.
  #ignorself = true

  # 'ignoreip' can be a list of IP addresses, CIDR masks or DNS hosts. Fail2ban
  # will not ban a host which matches an address in this list. Several addresses
  # can be defined using space (and/or comma) separator.
  ignoreip = 127.0.0.1/8 ::1

  # External command that will take an tagged arguments to ignore, e.g. <ip>,
  # and return true if the IP is to be ignored. False otherwise.
  #
  # ignorecommand = /path/to/command <ip>
  ignorecommand =

  # 'bantime' is the number of seconds that a host is banned.
  bantime  = 10m

  # A host is banned if it has generated 'maxretry' during the last 'findtime'
  # seconds.
  findtime  = 10m

  # 'maxretry' is the number of failures before a host get banned.
  maxretry = 5

  # 'backend' specifies the backend used to get files modification.
  # Available options are 'pyinotify', 'gamin', 'polling', 'systemd' and 'auto'.
  # This option can be overridden in each jail as well.
  #
  # pyinotify: requires pyinotify (a file alteration monitor) to be installed.
  #              If pyinotify is not installed, Fail2ban will use auto.
  # gamin:     requires Gamin (a file alteration monitor) to be installed.
  #              If Gamin is not installed, Fail2ban will use auto.
  # polling:   uses a polling algorithm which does not require external libraries.
  # systemd:   uses systemd python library to access the systemd journal.
  #              Specifying 'logpath' is not valid for this backend.
  #              See 'journalmatch' in the jails associated filter config
  # auto:      will try to use the following backends, in order:
  #              pyinotify, gamin, polling.
  #
  # Note: if systemd backend is chosen as the default but you enable a jail
  #       for which logs are present only in its own log files, specify some other
  #       backend for that jail (e.g. polling) and provide empty value for
  #       journalmatch. See https://github.com/fail2ban/fail2ban/issues/959#issuecomment-74901200
  backend = auto

  # 'usedns' specifies if jails should trust hostnames in logs,
  #   warn when DNS lookups are performed, or ignore all hostnames in logs
  #
  # yes:   if a hostname is encountered, a DNS lookup will be performed.
  # warn:  if a hostname is encountered, a DNS lookup will be performed,
  #        but it will be logged as a warning.
  # no:    if a hostname is encountered, will not be used for banning,
  #        but it will be logged as info.
  # raw:   use raw value (no hostname), allow use it for no-host filters/actions (example user)
  usedns = warn

  # 'logencoding' specifies the encoding of the log files handled by the jail
  #   This is used to decode the lines from the log file.
  #   Typical examples:  'ascii', 'utf-8'
  #
  #   auto:   will use the system locale setting
  logencoding = auto

  # 'enabled' enables the jails.
  #  By default all jails are disabled, and it should stay this way.
  #  Enable only relevant to your setup jails in your .local or jail.d/*.conf
  #
  # true:  jail will be enabled and log files will get monitored for changes
  # false: jail is not enabled
  enabled = true


  # 'mode' defines the mode of the filter (see corresponding filter implementation for more info).
  mode = normal

  # 'filter' defines the filter to use by the jail.
  #  By default jails have names matching their filter name
  #
  filter = %(__name__)s[mode=%(mode)s]


  #
  # ACTIONS
  #

  # Some options used for actions

  # Destination email address used solely for the interpolations in
  # jail.{conf,local,d/*} configuration files.
  destemail = contact@locascio.fr

  # Sender email address used solely for some actions
  sender = localhost@debian

  # E-mail action. Since 0.8.1 Fail2Ban uses sendmail MTA for the
  # mailing. Change mta configuration parameter to mail if you want to
  # revert to conventional 'mail'.
  mta = mail

  # Default protocol
  protocol = tcp

  # Specify chain where jumps would need to be added in ban-actions expecting parameter chain
  chain = <known/chain>

  # Ports to be banned
  # Usually should be overridden in a particular jail
  port = 0:65535

  # Format of user-agent https://tools.ietf.org/html/rfc7231#section-5.5.3
  fail2ban_agent = Fail2Ban/%(fail2ban_version)s

  #
  # Action shortcuts. To be used to define action parameter

  # Default banning action (e.g. iptables, iptables-new,
  # iptables-multiport, shorewall, etc) It is used to define
  # action_* variables. Can be overridden globally or per
  # section within jail.local file
  banaction = iptables-multiport
  banaction_allports = iptables-allports

  # The simplest action to take: ban only
  action_ = %(banaction)s[name=%(__name__)s, bantime='%(bantime)s', port='%(port)s', protocol='%(protocol)s', chain='%(chain)s']

  # ban & send an e-mail with whois report to the destemail.
  action_mw = %(banaction)s[name=%(__name__)s, bantime='%(bantime)s', port='%(port)s', protocol='%(protocol)s', chain='%(chain)s']
              %(mta)s-whois[name=%(__name__)s, sender='%(sender)s', dest='%(destemail)s', protocol='%(protocol)s', chain='%(chain)s']

  # ban & send an e-mail with whois report and relevant log lines
  # to the destemail.
  action_mwl = %(banaction)s[name=%(__name__)s, bantime='%(bantime)s', port='%(port)s', protocol='%(protocol)s', chain='%(chain)s']
               %(mta)s-whois-lines[name=%(__name__)s, sender='%(sender)s', dest='%(destemail)s', logpath=%(logpath)s, chain='%(chain)s']

  # See the IMPORTANT note in action.d/xarf-login-attack for when to use this action
  #
  # ban & send a xarf e-mail to abuse contact of IP address and include relevant log lines
  # to the destemail.
  action_xarf = %(banaction)s[name=%(__name__)s, bantime='%(bantime)s', port='%(port)s', protocol='%(protocol)s', chain='%(chain)s']
               xarf-login-attack[service=%(__name__)s, sender='%(sender)s', logpath=%(logpath)s, port='%(port)s']

  # ban IP on CloudFlare & send an e-mail with whois report and relevant log lines
  # to the destemail.
  action_cf_mwl = cloudflare[cfuser='%(cfemail)s', cftoken='%(cfapikey)s']
                  %(mta)s-whois-lines[name=%(__name__)s, sender='%(sender)s', dest='%(destemail)s', logpath=%(logpath)s, chain='%(chain)s']

  # Report block via blocklist.de fail2ban reporting service API
  #
  # See the IMPORTANT note in action.d/blocklist_de.conf for when to use this action.
  # Specify expected parameters in file action.d/blocklist_de.local or if the interpolation
  # `action_blocklist_de` used for the action, set value of `blocklist_de_apikey`
  # in your `jail.local` globally (section [DEFAULT]) or per specific jail section (resp. in
  # corresponding jail.d/my-jail.local file).
  #
  action_blocklist_de  = blocklist_de[email='%(sender)s', service=%(filter)s, apikey='%(blocklist_de_apikey)s', agent='%(fail2ban_agent)s']

  # Report ban via badips.com, and use as blacklist
  #
  # See BadIPsAction docstring in config/action.d/badips.py for
  # documentation for this action.
  #
  # NOTE: This action relies on banaction being present on start and therefore
  # should be last action defined for a jail.
  #
  action_badips = badips.py[category='%(__name__)s', banaction='%(banaction)s', agent='%(fail2ban_agent)s']
  #
  # Report ban via badips.com (uses action.d/badips.conf for reporting only)
  #
  action_badips_report = badips[category='%(__name__)s', agent='%(fail2ban_agent)s']

  # Report ban via abuseipdb.com.
  #
  # See action.d/abuseipdb.conf for usage example and details.
  #
  action_abuseipdb = abuseipdb

  # Choose default action.  To change, just override value of 'action' with the
  # interpolation to the chosen action shortcut (e.g.  action_mw, action_mwl, etc) in jail.local
  # globally (section [DEFAULT]) or per specific section
  action = %(action_mwl)s


  #
  # JAILS
  #

  #
  # SSH servers
  #

  [sshd]

  # To use more aggressive sshd modes set filter parameter 'mode' in jail.local:
  # normal (default), ddos, extra or aggressive (combines all).
  # See 'tests/files/logs/sshd' or 'filter.d/sshd.conf' for usage example and details.
  enabled = true
  mode   = normal
  filter = sshd
  port    = ssh
  logpath = %(sshd_log)s
  backend = %(sshd_backend)s


  [dropbear]

  enabled  = true
  port     = ssh
  filter   = dropbear
  logpath  = %(dropbear_log)s
  backend  = %(dropbear_backend)s

  #
  #Http Server
  #

  [nginx-http-auth]

  enabled = true
  port    = http,https
  filter  = nginx-http-auth
  logpath = %(nginx_error_log)s

  # To use 'nginx-limit-req' jail you should have `ngx_http_limit_req_module`
  # and define `limit_req` and `limit_req_zone` as described in nginx documentation
  # http://nginx.org/en/docs/http/ngx_http_limit_req_module.html
  # or for example see in 'config/filter.d/nginx-limit-req.conf'

  [nginx-limit-req]
  enabled = true
  port    = http,https
  filter  = nginx-limit-req
  logpath = %(nginx_error_log)s

  [nginx-botsearch]

  enabled  = true
  port     = http,https
  filter   = nginx-botsearch
  logpath  = %(nginx_error_log)s
  maxretry = 2

  [nginx-noscript]
  enabled = true
  filter  = nginx-noscript
  port    = http,https
  logpath = /var/log/nginx/error.log


  # Ban attackers that try to use PHP's URL-fopen() functionality
  # through GET/POST variables. - Experimental, with more than a year
  # of usage in production environments.

  [php-url-fopen]

  enabled = true
  port    = http,https
  filter  = php-url-fopen
  logpath = %(nginx_access_log)s
            %(apache_access_log)s


  [suhosin]

  enabled = true
  port    = http,https
  filter = suhosin
  logpath = %(suhosin_log)s


  [lighttpd-auth]
  # Same as above for Apache's mod_auth
  # It catches wrong authentifications

  enabled = true
  port    = http,https
  filter  = lighttpd-auth
  logpath = %(lighttpd_error_log)s



  #
  # Mail servers
  #

  [postfix]
  # To use another modes set filter parameter 'mode' in jail.local:
  enabled = true
  mode    = more
  port    = smtp,465,submission
  filter  = postfix
  logpath = %(postfix_log)s
  backend = %(postfix_backend)s


  [postfix-rbl]

  filter   = postfix[mode=rbl]
  port     = smtp,465,submission
  logpath  = %(postfix_log)s
  backend  = %(postfix_backend)s
  maxretry = 1




  [postfix-sasl]

  filter   = postfix[mode=auth]
  port     = smtp,465,submission,imap,imaps,pop3,pop3s
  # You might consider monitoring /var/log/mail.warn instead if you are
  # running postfix since it would provide the same log lines at the
  # 'warn' level but overall at the smaller filesize.
  logpath  = %(postfix_log)s
  backend  = %(postfix_backend)s

  # [mysqld_safe]
  # syslog
  #
  # for own logfile


  # [mysqld]
  # log-error=/var/log/mysqld.log
  [mysqld-auth]

  enabled  = true
  port     = 3306
  filter   = mysqld-auth
  logpath  = %(mysql_log)s
  backend  = %(mysql_backend)s




  # Jail for more extended banning of persistent abusers
  # !!! WARNINGS !!!
  # 1. Make sure that your loglevel specified in fail2ban.conf/.local
  #    is not at DEBUG level -- which might then cause fail2ban to fall into
  #    an infinite loop constantly feeding itself with non-informative lines
  # 2. Increase dbpurgeage defined in fail2ban.conf to e.g. 648000 (7.5 days)
  #    to maintain entries for failed logins for sufficient amount of time
  [recidive]

  logpath  = /var/log/fail2ban.log
  banaction = %(banaction_allports)s
  bantime  = 1w
  findtime = 1d


  # Generic filter for PAM. Has to be used with action which bans all
  # ports such as iptables-allports, shorewall

  [pam-generic]
  # pam-generic filter can be customized to monitor specific subset of 'tty's
  banaction = %(banaction_allports)s
  logpath  = %(syslog_authpriv)s
  backend  = %(syslog_backend)s


  [xinetd-fail]

  banaction = iptables-multiport-log
  logpath   = %(syslog_daemon)s
  backend   = %(syslog_backend)s
  maxretry  = 2


  # stunnel - need to set port for this
  [stunnel]

  logpath = /var/log/stunnel4/stunnel.log


  [ejabberd-auth]

  port    = 5222
  logpath = /var/log/ejabberd/ejabberd.log


  [counter-strike]

  logpath = /opt/cstrike/logs/L[0-9]*.log
  # Firewall: http://www.cstrike-planet.com/faq/6
  tcpport = 27030,27031,27032,27033,27034,27035,27036,27037,27038,27039
  udpport = 1200,27000,27001,27002,27003,27004,27005,27006,27007,27008,27009,27010,27011,27012,27013,27014,27015
  action  = %(banaction)s[name=%(__name__)s-tcp, port='%(tcpport)s', protocol='tcp', chain='%(chain)s', actname=%(banaction)s-tcp]
             %(banaction)s[name=%(__name__)s-udp, port='%(udpport)s', protocol='udp', chain='%(chain)s', actname=%(banaction)s-udp]

  # consider low maxretry and a long bantime
  # nobody except your own Nagios server should ever probe nrpe
  [nagios]

  logpath  = %(syslog_daemon)s     ; nrpe.cfg may define a different log_facility
  backend  = %(syslog_backend)s
  maxretry = 1


  [oracleims]
  # see 'oracleims' filter file for configuration requirement for Oracle IMS v6 and above
  logpath = /opt/sun/comms/messaging64/log/mail.log_current
  banaction = %(banaction_allports)s

  [directadmin]
  logpath = /var/log/directadmin/login.log
  port = 2222

  [portsentry]
  logpath  = /var/lib/portsentry/portsentry.history
  maxretry = 1

  [pass2allow-ftp]
  # this pass2allow example allows FTP traffic after successful HTTP authentication
  port         = ftp,ftp-data,ftps,ftps-data
  # knocking_url variable must be overridden to some secret value in jail.local
  knocking_url = /knocking/
  filter       = apache-pass[knocking_url='%(knocking_url)s']
  # access log of the website with HTTP auth
  logpath      = %(apache_access_log)s
  blocktype    = RETURN
  returntype   = DROP
  action       = %(action_)s[blocktype=%(blocktype)s, returntype=%(returntype)s]
  bantime      = 1h
  maxretry     = 1
  findtime     = 1


  [murmur]
  # AKA mumble-server
  port     = 64738
  action   = %(banaction)s[name=%(__name__)s-tcp, port='%(port)s', protocol=tcp, chain='%(chain)s', actname=%(banaction)s-tcp]
             %(banaction)s[name=%(__name__)s-udp, port='%(port)s', protocol=udp, chain='%(chain)s', actname=%(banaction)s-udp]
  logpath  = /var/log/mumble-server/mumble-server.log


  [screensharingd]
  # For Mac OS Screen Sharing Service (VNC)
  logpath  = /var/log/system.log
  logencoding = utf-8

  [haproxy-http-auth]
  # HAProxy by default doesn't log to file you'll need to set it up to forward
  # logs to a syslog server which would then write them to disk.
  # See 'haproxy-http-auth' filter for a brief cautionary note when setting
  # maxretry and findtime.
  logpath  = /var/log/haproxy.log

  [slapd]
  port    = ldap,ldaps
  logpath = /var/log/slapd.log

  [domino-smtp]
  port    = smtp,ssmtp
  logpath = /home/domino01/data/IBM_TECHNICAL_SUPPORT/console.log

  [phpmyadmin-syslog]
  port    = http,https
  logpath = %(syslog_authpriv)s
  backend = %(syslog_backend)s


  [zoneminder]
  # Zoneminder HTTP/HTTPS web interface auth
  # Logs auth failures to apache2 error log
  port    = http,https
  logpath = %(apache_error_log)s
" > /etc/fail2ban/jail.local

 sudo echo "

[Definition]

failregex = \".*(\.php|\.exe|\.bat|\.sh|\.cmd)\" failed \(2\: No such file or directory\), client\: <HOST>

ignoreregex =

" > filter.d/nginx-noscript.conf

 sudo /etc/init.d/fail2ban restart

#==================================================================
#Instalation et configuration de UFW
#==================================================================

echo "==================================================================" >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log
echo "                Instalation et configuration de UFW               " >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log
echo "==================================================================" >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log

 sudo apt-get install ufw
 exec su root "iptables -t filter -F"
 exec su root "iptables -t filter -X"
 exec su root "ufw default deny incoming"
 exec su root "ufw default allow outgoing"
 exec su root "ufw allow SSH"
 exec su root "ufw allow \"WWW Full\""
 exec su root "ufw allow SMTP"
 exec su root "ufw enable"

#==================================================================
#Retirer webserver sudo
#==================================================================

echo "==================================================================" >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log
echo "                      Retirer webserver sudo                      " >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log
echo "==================================================================" >> ~/server-install.log
echo "                                                                  " >> ~/server-install.log

 deluser webserver sudo
 deluser webserver root
